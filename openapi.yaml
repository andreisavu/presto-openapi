openapi: 3.0.0
info:
  title: Presto Connector API
  version: 1.0.0
  description: API for interacting with Presto (based on the Thrift IDL)
servers:
  - url: https://localhost:8080
paths:
  /schemas:
    get:
      summary: List available schema names
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /schemas/{schema}/tables:
    get:
      summary: List tables for the given schema
      parameters:
        - name: schema
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaTable'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /schemas/{schema}/tables/{table}:
    get:
      summary: Get metadata for a table
      parameters:
        - name: schema
          in: path
          required: true
          schema:
            type: string
        - name: table
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableMetadata'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /schemas/{schema}/tables/{table}/splits:
    post:
      summary: Get a batch of splits
      parameters:
        - name: schema
          in: path
          required: true
          schema:
            type: string
        - name: table
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                desiredColumns:
                  type: array
                  items:
                    type: string
                outputConstraint:
                  $ref: '#/components/schemas/TupleDomain'
                maxSplitCount:
                  type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Splits'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /schemas/{schema}/tables/{table}/splits/{split}/rows:
    post:
      summary: Get a batch of rows for a split
      parameters:
        - name: schema
          in: path
          required: true
          schema:
            type: string
        - name: table
          in: path
          required: true
          schema:
            type: string
        - name: split
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                desiredColumns:
                  type: array
                  items:
                    type: string
                outputConstraint:
                  $ref: '#/components/schemas/TupleDomain'
                nextToken:
                  type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResult'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
        retryable:
          type: boolean
        errorCode:
          type: string
        errorName:
          type: string
        errorType:
          type: string

    SchemaTable:
      type: object
      properties:
        schema:
          type: string
        table:
          type: string

    TableMetadata:
      type: object
      properties:
        schemaTableName:
          $ref: '#/components/schemas/SchemaTable'
        columns:
          type: array
          items:
            $ref: '#/components/schemas/ColumnMetadata'
        comment:
          type: string

    ColumnMetadata:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        comment:
          type: string
        hidden:
          type: boolean

    TupleDomain:
      type: object
      properties:
        domains:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Domain'

    Domain:
      type: object
      properties:
        nullAllowed:
          type: boolean
        valueSet:
          $ref: '#/components/schemas/ValueSet'

    ValueSet:
      type: object
      properties:
        allOrNone:
          $ref: '#/components/schemas/AllOrNoneValueSet'
        equatable:
          $ref: '#/components/schemas/EquatableValueSet'
        range:
          $ref: '#/components/schemas/RangeValueSet'

    AllOrNoneValueSet:
      type: object
      properties:
        all:
          type: boolean

    EquatableValueSet:
      type: object
      properties:
        whiteList:
          type: boolean
        values:
          type: array
          items:
            $ref: '#/components/schemas/Block'

    RangeValueSet:
      type: object
      properties:
        ranges:
          type: array
          items:
            $ref: '#/components/schemas/Range'

    Range:
      type: object
      properties:
        low:
          $ref: '#/components/schemas/Marker'
        high:
          $ref: '#/components/schemas/Marker'

    Marker:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/Block'
        bound:
          type: string
          enum:
            - ABOVE
            - EXACTLY
            - BELOW

    Splits:
      type: object
      properties:
        splits:
          type: array
          items:
            type: string

    PageResult:
      type: object
      properties:
        columnBlocks:
          type: array
          items:
            $ref: '#/components/schemas/Block'
        rowCount:
          type: integer
        nextToken:
          type: string

    Block:
      type: object
      properties:
        integerData:
          $ref: '#/components/schemas/IntegerData'
        doubleData:
          $ref: '#/components/schemas/DoubleData'
        varcharData:
          $ref: '#/components/schemas/VarcharData'
        booleanData:
          $ref: '#/components/schemas/BooleanData'
        dateData:
          $ref: '#/components/schemas/DateData'
        timestampData:
          $ref: '#/components/schemas/TimestampData'

    IntegerData:
      type: object
      properties:
        nulls:
          type: array
          items:
            type: boolean
        ints:
          type: array
          items:
            type: integer

    DoubleData:
      type: object
      properties:
        nulls:
          type: array
          items:
            type: boolean
        doubles:
          type: array
          items:
            type: number

    VarcharData:
      type: object
      properties:
        nulls:
          type: array
          items:
            type: boolean
        sizes:
          type: array
          items:
            type: integer
        bytes:
          type: string
          format: base64

    BooleanData:
      type: object
      properties:
        nulls:
          type: array
          items:
            type: boolean
        booleans:
          type: array
          items:
            type: boolean

    DateData:
      type: object
      properties:
        nulls:
          type: array
          items:
            type: boolean
        dates:
          type: array
          items:
            type: string
            format: date

    TimestampData:
      type: object
      properties:
        nulls:
          type: array
          items:
            type: boolean
        timestamps:
          type: array
          items:
            type: string
            format: date-time
